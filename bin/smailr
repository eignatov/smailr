#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), ".." , "lib")

require 'smailr'

DB = Sequel.connect("sqlite:///Users/sts/smailr.sqlite")

#
# Helpers
#
def determine_object(string)
    return :domain  if string =~ /^[^@][A-Z0-9.-]+\.[A-Z]{2,6}$/i
    return :address if string =~ /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i
end

#
# Commands
#
command :add do |c|
    c.syntax = 'smailr add domain | mailbox [options]'
    c.summary = 'Add a domain or addresses to the mail system.'
    c.example 'Add a domain',  'smailr add example.com'
    c.example 'Add a mailbox', 'smailr add user@localdomain.com'
    c.example 'Add an alias',  'smailr add user@localdomain.com --alias alias@localdomain.com'
    c.option '--alias STRING',    String, 'Specify an alias to create for a mailbox.'
    c.option '--password STRING', String, 'The password for a new mailbox. If you omit this option, it prompts for one.'

    c.action do |args, options|
        address = args[0]
        type    = determine_object(address)
        case type
            when :domain
                Smailr::Domain.add(address)
            when :address
                Smailr::Alias.add(address, options) if options.alias
                Smailr::Mailbox.add(address, options) if not options.alias
            else
                say_error  "You can either add a domain or an address."
        end
    end
end

command :ls do |c|
    c.syntax  = 'smailr ls [domain]'
    c.summary = 'List domains or mailboxes of a specific domain.'
    c.action do |args, options|
        case args[0]
            when /^[^@][A-Z0-9.-]+\.[A-Z]{2,6}$/i then
                domain = Smailr::Model::Domain[:fqdn => args[0]]
                domain.mailboxes.each do |mbox|
                    puts "m: #{mbox.localpart}@#{args[0]}"
                    mbox.aliases.each do |aalias|
                        puts "a: #{aalias.address} > #{mbox.localpart}@#{args[0]}"
                    end
                end
            when nil
                domains = DB[:domains]
                domains.all.each do |d|
                    domain = Smailr::Model::Domain[:fqdn => d[:fqdn]]
                    puts d[:fqdn]
                end
            else
                error "You can either list a domains or an addresses."
                exit 1
        end
    end
end

command :rm do |c|
    c.syntax  = 'smailr rm domain | mailbox [options]'
    c.summary = 'Remove a domain, mailbox or alias known to the mail system.'
    c.example 'Remove a domain', 'smailr rm ono.at'
    c.option  '--force', 'Force the operation, do not ask for confirmation.'
    c.option '--alias STRING',    String, 'Specify the alias which you want to remove.'
    c.action do |args, options|
        type = determine_object(args[0])
        case type
            when :domain
                Smailr::Domain.rm(args[0], options)
            when :address
                Smailr::Alias.rm(args[0], options)   if options.alias
                Smailr::Mailbox.rm(args[0], options) if not options.alias
            else
                say_error "You can either remove a domain or an address."
                exit 1
        end
    end
end

command :setup do |c|
    c.syntax  = 'smailr setup'
    c.summary = 'Initialize the database.'
    c.action do |args, options|
        DB.create_table :domains do
            primary_key :id
            column :fqdn, :string, :unique => true
        end

        DB.create_table :mailboxes do
            primary_key :id
            foreign_key :domain_id
            column :localpart, :string, :required => true
            column :password,  :string, :required => true
            index [:domain_id, :localpart], :unique => true
        end

        DB.create_table :aliases do
            primary_key :id
            foreign_key :mailbox_id
            column      :address, :string, :required => true
            index [:address, :mailbox_id], :unique => true
            index :address
        end
    end
end
