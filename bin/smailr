#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), ".." , "lib")

require 'smailr'

DB = Sequel.connect("sqlite:///etc/exim4/smailr.sqlite")

#
# Helpers
#
def determine_object(string)
    return :domain  if string =~ /^[^@][A-Z0-9.-]+\.[A-Z]{2,6}$/i
    return :address if string =~ /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i
end

#
# Commands
#
command :add do |c|
    c.syntax = 'smailr add domain | mailbox [options]'
    c.summary = 'Add a domain or addresses to the mail system.'
    c.example 'Add a domain',  'smailr add example.com'
    c.example 'Add a mailbox', 'smailr add user@localdomain.com'
    c.example 'Add an alias',  'smailr add user@localdomain.com --alias alias@localdomain.com'
    c.example 'Setup DKIM for a domain', 'smailr add ono.at --dkim'
    c.option  '--alias STRING',    String,  'Specify an alias to create for a mailbox.'
    c.option  '--password STRING', String,  'The password for a new mailbox. If you omit this option, it prompts for one.'
    c.option  '--dkim',            String,  'Add a DKIM Key for a domain'
    c.action do |args, options|
        address = args[0]
        type    = determine_object(address)

        case type
            when :domain
                if options.dkim
                    Smailr::Dkim.add(address, options)
                else
                    Smailr::Domain.add(address)
                end

            when :address
                Smailr::Alias.add(address, options) if options.alias
                Smailr::Mailbox.add(address, options) if not options.alias
        end
    end
end

command :ls do |c|
    c.syntax  = 'smailr ls [domain]'
    c.summary = 'List domains or mailboxes of a specific domain.'
    c.action do |args, options|
        case args[0]
            when /^[^@][A-Z0-9.-]+\.[A-Z]{2,6}$/i then
                domain = Smailr::Model::Domain[:fqdn => args[0]]
                domain.mailboxes.each do |mbox|
                    puts "m: #{mbox.localpart}@#{args[0]}"
                    mbox.aliases.each do |aalias|
                        puts "a: #{aalias.address} > #{mbox.localpart}@#{args[0]}"
                    end
                end
            when nil
                domains = DB[:domains]
                domains.all.each do |d|
                    domain = Smailr::Model::Domain[:fqdn => d[:fqdn]]
                    puts d[:fqdn]
                end
            else
                error "You can either list a domains or an addresses."
                exit 1
        end
    end
end

command :rm do |c|
    c.syntax  = 'smailr rm domain | mailbox [options]'
    c.summary = 'Remove a domain, mailbox or alias known to the mail system.'
    c.example 'Remove a domain', 'smailr rm example.com'
    c.option '--force', 'Force the operation, do not ask for confirmation.'
    c.option '--dkim',  'Remove a dkim key.' 
    c.option '--alias STRING',    String, 'Specify the alias which you want to remove.'
    c.action do |args, options|
        address = args[0]
        type    = determine_object(address)
        case type
            when :domain
                if options.dkim
                    Smailr::Dkim.rm(address, options)
                else
                    Smailr::Domain.rm(address, options)
                end

            when :address
                Smailr::Alias.rm(address, options)   if options.alias
                Smailr::Mailbox.rm(address, options) if not options.alias
        end
    end
end


command :migrate do |c|
    c.syntax  = 'smailr migrate [options]'
    c.summary = 'Run database migrations'
    c.option '--to VERSION', String, 'Migrate the database to a specifict version.'
    c.action do |args,options|
        require 'sequel/extensions/migration'
        raise "Database not configured" unless DB

        if options.version.nil?
            Sequel::Migrator.apply(DB, 'migrations' )
        else
            Sequel::Migrator.apply(DB, 'migrations', :target => options.version.to_i)
        end
    end
end


command :mutt do |c|
    c.syntax      = "smailr mutt address"
    c.summary     = "View the mailbox of the specified address in mutt."
    c.description = "Open the mailbox of the specified address in mutt.\n\n    " +
                    "Requires that mutt is installed and assumes the default mail\n    " +
                    "storage directory structure: /srv/mail/users/<fqdn>/<localpart>"
    c.example       'Open test@example.com', 'smailr mutt test@example.com'
    c.action do |args,options|
        localpart, fqdn = args[0].split('@')
        `command -v mutt >/dev/null 2>&1 || { echo "Please install mutt first. Aborting." >&2; exit 1; }`
        if not $?
            exec "MAIL=/srv/mail/users/#{fqdn}/#{localpart} MAILDIR=$MAIL mutt -mMaildir]"
        end
    end
end
